name: aci-privateagents-kv-integration
trigger:
  branches:
    include:
      - master
  paths:
    include:
      - src/terraform/*
      - src/pipelines/*

resources:
  - repo: self

variables:
  - name: tag
    value: "$(Build.BuildId)"
  - group: TFBackend
  - name: skipComponentGovernanceDetection
    value: true
  - name: vmImageName
    value: "ubuntu-latest"
  - name: terraformVersion
    value: 0.12.24

stages:
  - stage: DeployInfra
    displayName: Deploy Infra
    jobs:
      - job: DeployInfra
        displayName: Deploy Infra
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
            displayName: "Use Terraform $(terraformVersion)"
            inputs:
              terraformVersion: $(terraformVersion)
          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
            displayName: "terraform init"
            inputs:
              command: init
              commandOptions: "-backend=true -backend-config=backend.tf"
              backendType: azurerm
              backendServiceArm: $(service_connection)
              ensureBackend: true
              backendAzureRmResourceGroupLocation: $(location)
              backendAzureRmResourceGroupName: $(backendStorageResourceGroupName)
              backendAzureRmStorageAccountName: $(backendStorageAccountName)
              backendAzureRmStorageAccountSku: $(backendStorageAccountSKU)
              backendAzureRmContainerName: $(backendContainerName)
              backendAzureRmKey: "$(Build.DefinitionName)/tfstate-$(tag)"
              workingDirectory: "$(System.DefaultWorkingDirectory)/src/terraform"
          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
            displayName: "terraform validate"
            inputs:
              workingDirectory: "$(System.DefaultWorkingDirectory)/src/terraform"
          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
            displayName: "terraform plan"
            inputs:
              command: plan
              environmentServiceName: $(service_connection)
              workingDirectory: "$(System.DefaultWorkingDirectory)/src/terraform"
              commandOptions: "-var resource_group_name=$(Build.DefinitionName) -var suffix=$(tag)"
          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
            displayName: "terraform apply"
            inputs:
              command: apply
              environmentServiceName: $(service_connection)
              workingDirectory: "$(System.DefaultWorkingDirectory)/src/terraform"
              commandOptions: "-var resource_group_name=$(Build.DefinitionName) -var suffix=$(tag) -var destroy_accesspolicy=0"
          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
            displayName: "terraform apply"
            inputs:
              command: apply
              environmentServiceName: $(service_connection)
              workingDirectory: "$(System.DefaultWorkingDirectory)/src/terraform"
              commandOptions: "-var resource_group_name=$(Build.DefinitionName) -var suffix=$(tag) -var destroy_accesspolicy=1"
